type User @model {
  id: ID! @isUnique # read-only (managed by Graphcool)
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  email: String @isUnique
  joinedParties: [Party!]! @relation(name: "UserJoinedParties")
  name: String @isUnique
  ownedParties: [Party!]! @relation(name: "UserOwnedParties")
  password: String
}

type Party @model {
  id: ID! @isUnique # read-only (managed by Graphcool)
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  achievements: String
  admin: User! @relation(name: "UserOwnedParties")
  characters: [Character!]! @relation(name: "PartyCharacter")
  location: String @defaultValue(value: "Gloomhaven")
  members: [User!]! @relation(name: "UserJoinedParties")
  name: String!
  notes: String
  reputation: Int @defaultValue(value: 0)
}

type Character @model {
  id: ID! @isUnique # read-only (managed by Graphcool)
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  characterClass: CharacterClass! @relation(name: "CharacterOnCharacterClass")
  gold: Int @defaultValue(value: 30)
  items: String
  level: Int @defaultValue(value: 1)
  name: String
  party: Party! @relation(name: "PartyCharacter")
  perkFragments: Int @defaultValue(value: 0)
  perks: String
  xp: Int @defaultValue(value: 0)
}

type CharacterClass @model {
  id: ID! @isUnique # read-only (managed by Graphcool)
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  classId: String! @isUnique
  characters: [Character!]! @relation(name: "CharacterOnCharacterClass")
  className: String
  information: String
  race: String
}
